Code 14
Problem Statement: Queues are frequently used in computer programming, and a typical example is the creation of a job queue by an operating system. If the operating system does not use priorities, then the jobs are processed in the order they enter the system. Write C++program for simulating job queue. Write functions to add job and delete job from queue.*
Code 
#include <iostream>
#define MAX 5  // Maximum size of the queue
using namespace std;

struct queue {
    int data[MAX];
    int front, rear;
};

class Queue {
    struct queue q;

public:
    Queue() { q.front = q.rear = -1; }
    int isempty();
    int isfull();
    void enqueue(int);
    int delqueue();
    void display();
};

// Function to check if the queue is empty
int Queue::isempty() {
    return (q.front == q.rear) ? 1 : 0;
}

// Function to check if the queue is full
int Queue::isfull() {
    return (q.rear == MAX - 1) ? 1 : 0;
}

// Function to add an element to the queue
void Queue::enqueue(int x) {
    if (isfull()) {
        cout << "Queue is overflow\n";
    } else {
        q.data[++q.rear] = x;
        cout << "Job added: " << x << endl;
    }
}

// Function to remove an element from the queue
int Queue::delqueue() {
    if (isempty()) {
        cout << "Queue is underflow\n";
        return -1;
    } else {
        return q.data[++q.front];
    }
}

// Function to display the queue
void Queue::display() {
    if (isempty()) {
        cout << "Queue is empty\n";
    } else {
        cout << "Jobs in queue: ";
        for (int i = q.front + 1; i <= q.rear; i++) {
            cout << q.data[i] << " ";
        }
        cout << endl;
    }
}

int main() {
    Queue obj;
    int ch, x;
    do {
        cout << "\n1. Insert job\n2. Delete job\n3. Display\n4. Exit\nEnter your choice: ";
        cin >> ch;
        switch (ch) {
            case 1:
                if (!obj.isfull()) {
                    cout << "Enter job ID: ";
                    cin >> x;
                    obj.enqueue(x);
                } else {
                    cout << "Queue is full (overflow)\n";
                }
                break;

            case 2:
                if (!obj.isempty()) {
                    cout << "Deleted Job ID: " << obj.delqueue() << endl;
                } else {
                    cout << "Queue is empty (underflow)\n";
                }
                break;

            case 3:
                obj.display();
                break;

            case 4:
                cout << "Exit\n";
                break;

            default:
                cout << "Invalid choice!\n";
                break;
        }
    } while (ch != 4);

    return 0;
}
